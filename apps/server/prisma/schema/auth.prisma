model User {
  id            String    @id @map("_id")
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  taskCreated   Task[]    @relation("TaskCreated")
  taskAssigned  Task[]    @relation("TaskAssigned")
  comments      Comment[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Task {
  id           String       @id @map("_id")
  title        String
  description  String
  status       TaskStatus   @default(TODO)
  priority     TaskPriority @default(LOW)
  dueDate      DateTime?
  createdById  String
  createdBy    User         @relation("TaskCreated", fields: [createdById], references: [id], onDelete: Cascade)
  assignedToId String?
  assignedTo   User?        @relation("TaskAssigned", fields: [assignedToId], references: [id], onDelete: Cascade)
  comments     Comment[]
  tags         Tag[]        @relation("TaskTags")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("task")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model Comment {
  id        String   @id @map("_id")
  content   String
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comment")
}

model Tag {
  id        String   @id @map("_id")
  name      String
  color     String?
  tasks     Task[]   @relation("TaskTags")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tag")
}
